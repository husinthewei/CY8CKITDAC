C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 1   


C51 COMPILER V9.51, COMPILATION OF MODULE CYSPC
OBJECT MODULE PLACED IN .\DP8051_Keil_951\Debug\CySpc.obj
COMPILER INVOKED BY: C:\Program Files (x86)\Cypress\PSoC Creator\4.0\PSoC Creator\import\keil\pk51\9.51\C51\BIN\c51.exe 
                    -Generated_Source\PSoC3\CySpc.c NOIV LARGE MODDP2 OMF2 VB(1) NOIP INCDIR(.,Generated_Source\PSoC3) FF(3) DB WL(2) PR(.\DP
                    -8051_Keil_951\Debug/CySpc.lst) CD OT(0,SPEED) OJ(.\DP8051_Keil_951\Debug\CySpc.obj)

line level    source

   1          /***************************************************************************//**
   2          * \file CySpc.c
   3          * \version 5.50
   4          *
   5          * \brief Provides an API for the System Performance Component.
   6          * The SPC functions are not meant to be called directly by the user
   7          * application.
   8          *
   9          ********************************************************************************
  10          * \copyright
  11          * Copyright 2008-2016, Cypress Semiconductor Corporation.  All rights reserved.
  12          * You may use this file only in accordance with the license, terms, conditions,
  13          * disclaimers, and limitations in the end user license agreement accompanying
  14          * the software package with which this file was provided.
  15          *******************************************************************************/
  16          
  17          #include "CySpc.h"
  18          
  19          #define CY_SPC_KEY_ONE                      (0xB6u)
  20          #define CY_SPC_KEY_TWO(x)                   ((uint8) (((uint16) 0xD3u) + ((uint16) (x))))
  21          
  22          /* Command Codes */
  23          #define CY_SPC_CMD_LD_BYTE                  (0x00u)
  24          #define CY_SPC_CMD_LD_MULTI_BYTE            (0x01u)
  25          #define CY_SPC_CMD_LD_ROW                   (0x02u)
  26          #define CY_SPC_CMD_RD_BYTE                  (0x03u)
  27          #define CY_SPC_CMD_RD_MULTI_BYTE            (0x04u)
  28          #define CY_SPC_CMD_WR_ROW                   (0x05u)
  29          #define CY_SPC_CMD_WR_USER_NVL              (0x06u)
  30          #define CY_SPC_CMD_PRG_ROW                  (0x07u)
  31          #define CY_SPC_CMD_ER_SECTOR                (0x08u)
  32          #define CY_SPC_CMD_ER_ALL                   (0x09u)
  33          #define CY_SPC_CMD_RD_HIDDEN                (0x0Au)
  34          #define CY_SPC_CMD_PRG_PROTECT              (0x0Bu)
  35          #define CY_SPC_CMD_CHECKSUM                 (0x0Cu)
  36          #define CY_SPC_CMD_DWNLD_ALGORITHM          (0x0Du)
  37          #define CY_SPC_CMD_GET_TEMP                 (0x0Eu)
  38          #define CY_SPC_CMD_GET_ADC                  (0x0Fu)
  39          #define CY_SPC_CMD_RD_NVL_VOLATILE          (0x10u)
  40          #define CY_SPC_CMD_SETUP_TS                 (0x11u)
  41          #define CY_SPC_CMD_DISABLE_TS               (0x12u)
  42          #define CY_SPC_CMD_ER_ROW                   (0x13u)
  43          
  44          /* Enable bit in Active and Alternate Active mode templates */
  45          #define PM_SPC_PM_EN                        (0x08u)
  46          
  47          /* Gate calls to the SPC. */
  48          uint8 SpcLockState = CY_SPC_UNLOCKED;
  49          
  50          
  51          #if(CY_PSOC5)
              
                  /***************************************************************************
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 2   

                  * The wait-state pipeline must be enabled prior to accessing the SPC
                  * register interface regardless of CPU frequency. The CySpcLock() saves
                  * current wait-state pipeline state and enables it. The CySpcUnlock()
                  * function, which must be called after SPC transaction, restores original
                  * state.
                  ***************************************************************************/
                  static uint32 spcWaitPipeBypass = 0u;
              
              #endif  /* (CY_PSOC5) */
  63          
  64          
  65          /*******************************************************************************
  66          * Function Name: CySpcStart
  67          ****************************************************************************//**
  68          *  Starts the SPC.
  69          *
  70          *******************************************************************************/
  71          void CySpcStart(void) 
  72          {
  73   1          /* Save current global interrupt enable and disable it */
  74   1          uint8 interruptState = CyEnterCriticalSection();
  75   1      
  76   1          CY_SPC_PM_ACT_REG  |= PM_SPC_PM_EN;
  77   1          CY_SPC_PM_STBY_REG |= PM_SPC_PM_EN;
  78   1      
  79   1          /* Restore global interrupt enable state */
  80   1          CyExitCriticalSection(interruptState);
  81   1      }
  82          
  83          
  84          /*******************************************************************************
  85          * Function Name: CySpcStop
  86          ****************************************************************************//**
  87          *  Stops the SPC.
  88          *
  89          *******************************************************************************/
  90          void CySpcStop(void) 
  91          {
  92   1          /* Save current global interrupt enable and disable it */
  93   1          uint8 interruptState = CyEnterCriticalSection();
  94   1      
  95   1          CY_SPC_PM_ACT_REG  &= ((uint8)(~PM_SPC_PM_EN));
  96   1          CY_SPC_PM_STBY_REG &= ((uint8)(~PM_SPC_PM_EN));
  97   1      
  98   1          /* Restore global interrupt enable state */
  99   1          CyExitCriticalSection(interruptState);
 100   1      }
 101          
 102          
 103          /*******************************************************************************
 104          * Function Name: CySpcReadData
 105          ****************************************************************************//**
 106          *  Reads data from the SPC.
 107          *
 108          *  \param uint8 buffer:
 109          *   Address to store data read.
 110          *
 111          *  \param uint8 size:
 112          *   Number of bytes to read from the SPC.
 113          *
 114          * \return
 115          *  uint8:
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 3   

 116          *   The number of bytes read from the SPC.
 117          *
 118          *******************************************************************************/
 119          uint8 CySpcReadData(uint8 buffer[], uint8 size) 
 120          {
 121   1          uint8 i;
 122   1      
 123   1          for(i = 0u; i < size; i++)
 124   1          {
 125   2              while(!CY_SPC_DATA_READY)
 126   2              {
 127   3                  CyDelayUs(1u);
 128   3              }
 129   2              buffer[i] = CY_SPC_CPU_DATA_REG;
 130   2          }
 131   1      
 132   1          return(i);
 133   1      }
 134          
 135          
 136          /*******************************************************************************
 137          * Function Name: CySpcLoadMultiByte
 138          ****************************************************************************//**
 139          *  Loads 1 to 32 bytes of data into the row latch of a Flash/EEPROM array.
 140          *
 141          *  \param uint8 array:
 142          *   Id of the array.
 143          *
 144          *  \param uint16 address:
 145          *   Flash/eeprom addrress
 146          *
 147          *  \param uint8* buffer:
 148          *   Data to load to the row latch
 149          *
 150          *  \param uint16 number:
 151          *   Number bytes to load.
 152          *
 153          * \return
 154          *  CYRET_STARTED
 155          *  CYRET_CANCELED
 156          *  CYRET_LOCKED
 157          *  CYRET_BAD_PARAM
 158          *
 159          *******************************************************************************/
 160          cystatus CySpcLoadMultiByte(uint8 array, uint16 address, const uint8 buffer[], uint8 size)\
 161          
 162          {
 163   1          cystatus status = CYRET_STARTED;
 164   1          uint8 i;
 165   1      
 166   1          /***************************************************************************
 167   1          * Check if number is correct for array. Number must be less than
 168   1          * 32 for Flash or less than 16 for EEPROM.
 169   1          ***************************************************************************/
 170   1          if(((array < CY_SPC_LAST_FLASH_ARRAYID) && (size < 32u)) ||
 171   1             ((array > CY_SPC_LAST_FLASH_ARRAYID) && (size < 16u)))
 172   1          {
 173   2              if(CY_SPC_IDLE)
 174   2              {
 175   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 176   3                  CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_MULTI_BYTE);
 177   3                  CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_MULTI_BYTE;
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 4   

 178   3      
 179   3                  if(CY_SPC_BUSY)
 180   3                  {
 181   4                      CY_SPC_CPU_DATA_REG = array;
 182   4                      CY_SPC_CPU_DATA_REG = 1u & HI8(address);
 183   4                      CY_SPC_CPU_DATA_REG = LO8(address);
 184   4                      CY_SPC_CPU_DATA_REG = ((uint8)(size - 1u));
 185   4      
 186   4                      for(i = 0u; i < size; i++)
 187   4                      {
 188   5                          CY_SPC_CPU_DATA_REG = buffer[i];
 189   5                      }
 190   4                  }
 191   3                  else
 192   3                  {
 193   4                      status = CYRET_CANCELED;
 194   4                  }
 195   3              }
 196   2              else
 197   2              {
 198   3                  status = CYRET_LOCKED;
 199   3              }
 200   2          }
 201   1          else
 202   1          {
 203   2              status = CYRET_BAD_PARAM;
 204   2          }
 205   1      
 206   1          return(status);
 207   1      }
 208          
 209          
 210          /*******************************************************************************
 211          * Function Name: CySpcLoadRow
 212          ****************************************************************************//**
 213          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 214          *
 215          *  The buffer pointer should point to the data that should be written to the
 216          *  flash row directly (no data in ECC/flash will be preserved). It is Flash API
 217          *  responsibility to prepare data: the preserved data are copied from flash into
 218          *  array with the modified data.
 219          *
 220          *  \param uint8 array:
 221          *   Id of the array.
 222          *
 223          *  \param uint8* buffer:
 224          *   Data to be loaded to the row latch
 225          *
 226          *  \param uint8 size:
 227          *   The number of data bytes that the SPC expects to be written. Depends on the
 228          *   type of the array and, if the array is Flash, whether ECC is being enabled
 229          *   or not. There are following values: flash row latch size with ECC enabled,
 230          *   flash row latch size with ECC disabled and EEPROM row latch size.
 231          *
 232          * \return
 233          *  CYRET_STARTED
 234          *  CYRET_CANCELED
 235          *  CYRET_LOCKED
 236          *
 237          *******************************************************************************/
 238          cystatus CySpcLoadRow(uint8 array, const uint8 buffer[], uint16 size)
 239          {
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 5   

 240   1          cystatus status = CYRET_STARTED;
 241   1          uint16 i;
 242   1      
 243   1          /* Make sure the SPC is ready to accept command */
 244   1          if(CY_SPC_IDLE)
 245   1          {
 246   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 247   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 248   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 249   2      
 250   2              /* Make sure the command was accepted */
 251   2              if(CY_SPC_BUSY)
 252   2              {
 253   3                  CY_SPC_CPU_DATA_REG = array;
 254   3      
 255   3                  for(i = 0u; i < size; i++)
 256   3                  {
 257   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 258   4                  }
 259   3              }
 260   2              else
 261   2              {
 262   3                  status = CYRET_CANCELED;
 263   3              }
 264   2          }
 265   1          else
 266   1          {
 267   2              status = CYRET_LOCKED;
 268   2          }
 269   1      
 270   1          return(status);
 271   1      }
 272          
 273          
 274          /*******************************************************************************
 275          * Function Name: CySpcLoadRowFull
 276          ****************************************************************************//**
 277          *  Loads a row of data into the row latch of a Flash/EEPROM array.
 278          *
 279          *  The only data that are going to be changed should be passed. The function
 280          *  will handle unmodified data preservation based on DWR settings and input
 281          *  parameters.
 282          *
 283          *  \param uint8 array:
 284          *   Id of the array.
 285          *
 286          *  \param uint16 row:
 287          *   Flash row number to be loaded.
 288          *
 289          *  \param uint8* buffer:
 290          *   Data to be loaded to the row latch
 291          *
 292          *  \param uint8 size:
 293          *   The number of data bytes that the SPC expects to be written. Depends on the
 294          *   type of the array and, if the array is Flash, whether ECC is being enabled
 295          *   or not. There are following values: flash row latch size with ECC enabled,
 296          *   flash row latch size with ECC disabled and EEPROM row latch size.
 297          *
 298          * \return
 299          *  CYRET_STARTED
 300          *  CYRET_CANCELED
 301          *  CYRET_LOCKED
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 6   

 302          *
 303          *******************************************************************************/
 304          cystatus CySpcLoadRowFull(uint8 array, uint16 row, const uint8 buffer[], uint16 size)\
 305          
 306          {
 307   1          cystatus status = CYRET_STARTED;
 308   1          uint16 i;
 309   1      
 310   1          #if (CYDEV_ECC_ENABLE == 0)
 311   1              uint32 offset;
 312   1          #endif /* (CYDEV_ECC_ENABLE == 0) */
 313   1      
 314   1          /* Make sure the SPC is ready to accept command */
 315   1          if(CY_SPC_IDLE)
 316   1          {
 317   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 318   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_LD_ROW);
 319   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_LD_ROW;
 320   2      
 321   2              /* Make sure the command was accepted */
 322   2              if(CY_SPC_BUSY)
 323   2              {
 324   3                  CY_SPC_CPU_DATA_REG = array;
 325   3      
 326   3                  /*******************************************************************
 327   3                  * If "Enable Error Correcting Code (ECC)" and "Store Configuration
 328   3                  * Data in ECC" DWR options are disabled, ECC section is available
 329   3                  * for user data.
 330   3                  *******************************************************************/
 331   3                  #if ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u))
              
                              /*******************************************************************
                              * If size parameter equals size of the ECC row and selected array
                              * identification corresponds to the flash array (but not to EEPROM
                              * array) then data are going to be written to the ECC section.
                              * In this case flash data must be preserved. The flash data copied
                              * from flash data section to the SPC data register.
                              *******************************************************************/
                              if ((size == CYDEV_ECC_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
                              {
                                  offset = CYDEV_FLS_BASE +
                                           ((uint32) array * CYDEV_FLS_SECTOR_SIZE) +
                                           ((uint32)   row * CYDEV_FLS_ROW_SIZE   );
              
                                  for (i = 0u; i < CYDEV_FLS_ROW_SIZE; i++)
                                  {
                                      CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
                                  }
                              }
              
                          #endif /* ((CYDEV_ECC_ENABLE == 0u) && (CYDEV_CONFIGURATION_ECC == 0u)) */
 353   3      
 354   3      
 355   3                  for(i = 0u; i < size; i++)
 356   3                  {
 357   4                      CY_SPC_CPU_DATA_REG = buffer[i];
 358   4                  }
 359   3      
 360   3      
 361   3                  /*******************************************************************
 362   3                  * If "Enable Error Correcting Code (ECC)" DWR option is disabled,
 363   3                  * ECC section can be used for storing device configuration data
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 7   

 364   3                  * ("Store Configuration Data in ECC" DWR option is enabled) or for
 365   3                  * storing user data in the ECC section ("Store Configuration Data in
 366   3                  * ECC" DWR option is enabled). In both cases, the data in the ECC
 367   3                  * section must be preserved if flash data is written.
 368   3                  *******************************************************************/
 369   3                  #if (CYDEV_ECC_ENABLE == 0)
 370   3      
 371   3      
 372   3                      /*******************************************************************
 373   3                      * If size parameter equals size of the flash row and selected array
 374   3                      * identification corresponds to the flash array (but not to EEPROM
 375   3                      * array) then data are going to be written to the flash data
 376   3                      * section. In this case, ECC section data must be preserved.
 377   3                      * The ECC section data copied from ECC section to the SPC data
 378   3                      * register.
 379   3                      *******************************************************************/
 380   3                      if ((size == CYDEV_FLS_ROW_SIZE) && (array <= CY_SPC_LAST_FLASH_ARRAYID))
 381   3                      {
 382   4                          offset = CYDEV_ECC_BASE +
 383   4                                  ((uint32) array * CYDEV_ECC_SECTOR_SIZE) +
 384   4                                  ((uint32) row   * CYDEV_ECC_ROW_SIZE   );
 385   4      
 386   4                          for (i = 0u; i < CYDEV_ECC_ROW_SIZE; i++)
 387   4                          {
 388   5                              CY_SPC_CPU_DATA_REG = CY_GET_XTND_REG8((void CYFAR *)(offset + i));
 389   5                          }
 390   4                      }
 391   3      
 392   3                  #else
              
                              if(0u != row)
                              {
                                  /* To remove unreferenced local variable warning */
                              }
              
                          #endif /* (CYDEV_ECC_ENABLE == 0) */
 400   3              }
 401   2              else
 402   2              {
 403   3                  status = CYRET_CANCELED;
 404   3              }
 405   2          }
 406   1          else
 407   1          {
 408   2              status = CYRET_LOCKED;
 409   2          }
 410   1      
 411   1          return(status);
 412   1      }
 413          
 414          
 415          /*******************************************************************************
 416          * Function Name: CySpcWriteRow
 417          ****************************************************************************//**
 418          *  Erases then programs a row in Flash/EEPROM with data in row latch.
 419          *
 420          *  \param uint8 array:
 421          *   Id of the array.
 422          *
 423          *  \param uint16 address:
 424          *   flash/eeprom addrress
 425          *
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 8   

 426          *  \param uint8 tempPolarity:
 427          *   temperature polarity.
 428          *   \param 1: the Temp Magnitude is interpreted as a positive value
 429          *   \param 0: the Temp Magnitude is interpreted as a negative value
 430          *
 431          *  \param uint8 tempMagnitude:
 432          *   temperature magnitude.
 433          *
 434          * \return
 435          *  CYRET_STARTED
 436          *  CYRET_CANCELED
 437          *  CYRET_LOCKED
 438          *
 439          *******************************************************************************/
 440          cystatus CySpcWriteRow(uint8 array, uint16 address, uint8 tempPolarity, uint8 tempMagnitude)\
 441          
 442          {
 443   1          cystatus status = CYRET_STARTED;
 444   1      
 445   1          /* Make sure the SPC is ready to accept command */
 446   1          if(CY_SPC_IDLE)
 447   1          {
 448   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 449   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_WR_ROW);
 450   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_WR_ROW;
 451   2      
 452   2              /* Make sure the command was accepted */
 453   2              if(CY_SPC_BUSY)
 454   2              {
 455   3                  CY_SPC_CPU_DATA_REG = array;
 456   3                  CY_SPC_CPU_DATA_REG = HI8(address);
 457   3                  CY_SPC_CPU_DATA_REG = LO8(address);
 458   3                  CY_SPC_CPU_DATA_REG = tempPolarity;
 459   3                  CY_SPC_CPU_DATA_REG = tempMagnitude;
 460   3              }
 461   2              else
 462   2              {
 463   3                  status = CYRET_CANCELED;
 464   3              }
 465   2          }
 466   1          else
 467   1          {
 468   2              status = CYRET_LOCKED;
 469   2          }
 470   1      
 471   1          return(status);
 472   1      }
 473          
 474          
 475          /*******************************************************************************
 476          * Function Name: CySpcEraseSector
 477          ****************************************************************************//**
 478          *  Erases all data in the addressed sector (block of 64 rows).
 479          *
 480          *  \param uint8 array:
 481          *   Id of the array.
 482          *
 483          *  \param uint8 sectorNumber:
 484          *   Zero based sector number within Flash/EEPROM array
 485          *
 486          * \return
 487          *  CYRET_STARTED
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 9   

 488          *  CYRET_CANCELED
 489          *  CYRET_LOCKED
 490          *
 491          *******************************************************************************/
 492          cystatus CySpcEraseSector(uint8 array, uint8 sectorNumber)
 493          {
 494   1          cystatus status = CYRET_STARTED;
 495   1      
 496   1          /* Make sure the SPC is ready to accept command */
 497   1          if(CY_SPC_IDLE)
 498   1          {
 499   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 500   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_ER_SECTOR);
 501   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_ER_SECTOR;
 502   2      
 503   2              /* Make sure the command was accepted */
 504   2              if(CY_SPC_BUSY)
 505   2              {
 506   3                  CY_SPC_CPU_DATA_REG = array;
 507   3                  CY_SPC_CPU_DATA_REG = sectorNumber;
 508   3              }
 509   2              else
 510   2              {
 511   3                  status = CYRET_CANCELED;
 512   3              }
 513   2          }
 514   1          else
 515   1          {
 516   2              status = CYRET_LOCKED;
 517   2          }
 518   1      
 519   1          return(status);
 520   1      }
 521          
 522          
 523          /*******************************************************************************
 524          * Function Name: CySpcGetTemp
 525          ****************************************************************************//**
 526          *  Returns the internal die temperature
 527          *
 528          *  \param uint8 numSamples:
 529          *   Number of samples. Valid values are 1-5, resulting in 2 - 32 samples
 530          *   respectively.
 531          *
 532          * \param uint16 timerPeriod:
 533          *   Number of ADC ACLK cycles. A valid 14 bit value is accepted, higher 2 bits
 534          *   of 16 bit values are ignored.
 535          *
 536          * \param uint8 clkDivSelect:
 537          *   ADC ACLK clock divide value. Valid values are 2 - 225.
 538          *
 539          * \return
 540          *  CYRET_STARTED
 541          *  CYRET_CANCELED
 542          *  CYRET_LOCKED
 543          *
 544          *******************************************************************************/
 545          cystatus CySpcGetTemp(uint8 numSamples)
 546          {
 547   1          cystatus status = CYRET_STARTED;
 548   1      
 549   1          /* Make sure the SPC is ready to accept command */
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 10  

 550   1          if(CY_SPC_IDLE)
 551   1          {
 552   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 553   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_GET_TEMP);
 554   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_GET_TEMP;
 555   2      
 556   2              /* Make sure the command was accepted */
 557   2              if(CY_SPC_BUSY)
 558   2              {
 559   3                  CY_SPC_CPU_DATA_REG = numSamples;
 560   3              }
 561   2              else
 562   2              {
 563   3                  status = CYRET_CANCELED;
 564   3              }
 565   2          }
 566   1          else
 567   1          {
 568   2              status = CYRET_LOCKED;
 569   2          }
 570   1      
 571   1          return(status);
 572   1      }
 573          
 574          
 575          /*******************************************************************************
 576          * Function Name: CySpcLock
 577          ****************************************************************************//**
 578          *  Locks the SPC so it can not be used by someone else:
 579          *   - Saves wait-pipeline enable state and enable pipeline (PSoC5)
 580          *
 581          * \return
 582          *  CYRET_SUCCESS - if the resource was free.
 583          *  CYRET_LOCKED  - if the SPC is in use.
 584          *
 585          *******************************************************************************/
 586          cystatus CySpcLock(void)
 587          {
 588   1          cystatus status = CYRET_LOCKED;
 589   1          uint8 interruptState;
 590   1      
 591   1          /* Enter critical section */
 592   1          interruptState = CyEnterCriticalSection();
 593   1      
 594   1          if(CY_SPC_UNLOCKED == SpcLockState)
 595   1          {
 596   2              SpcLockState = CY_SPC_LOCKED;
 597   2              status = CYRET_SUCCESS;
 598   2      
 599   2              #if(CY_PSOC5)
              
                          if(0u != (CY_SPC_CPU_WAITPIPE_REG & CY_SPC_CPU_WAITPIPE_BYPASS))
                          {
                              /* Enable pipeline registers */
                              CY_SPC_CPU_WAITPIPE_REG &= ((uint32)(~CY_SPC_CPU_WAITPIPE_BYPASS));
              
                              /* At least 2 NOP instructions are recommended */
                              CY_NOP;
                              CY_NOP;
                              CY_NOP;
              
                              spcWaitPipeBypass = CY_SPC_CPU_WAITPIPE_BYPASS;
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 11  

                          }
              
                      #endif  /* (CY_PSOC5) */
 615   2          }
 616   1      
 617   1          /* Exit critical section */
 618   1          CyExitCriticalSection(interruptState);
 619   1      
 620   1          return(status);
 621   1      }
 622          
 623          
 624          /*******************************************************************************
 625          * Function Name: CySpcUnlock
 626          ****************************************************************************//**
 627          *  Unlocks the SPC so it can be used by someone else:
 628          *   - Restores wait-pipeline enable state (PSoC5)
 629          *
 630          *******************************************************************************/
 631          void CySpcUnlock(void)
 632          {
 633   1          uint8 interruptState;
 634   1      
 635   1          /* Enter critical section */
 636   1          interruptState = CyEnterCriticalSection();
 637   1      
 638   1          /* Release the SPC object */
 639   1          SpcLockState = CY_SPC_UNLOCKED;
 640   1      
 641   1          #if(CY_PSOC5)
              
                      if(CY_SPC_CPU_WAITPIPE_BYPASS == spcWaitPipeBypass)
                      {
                          /* Force to bypass pipeline registers */
                          CY_SPC_CPU_WAITPIPE_REG |= CY_SPC_CPU_WAITPIPE_BYPASS;
              
                          /* At least 2 NOP instructions are recommended */
                          CY_NOP;
                          CY_NOP;
                          CY_NOP;
              
                          spcWaitPipeBypass = 0u;
                      }
              
                  #endif  /* (CY_PSOC5) */
 657   1      
 658   1          /* Exit critical section */
 659   1          CyExitCriticalSection(interruptState);
 660   1      }
 661          
 662          
 663          /*******************************************************************************
 664          * Function Name: CySpcGetAlgorithm
 665          ****************************************************************************//**
 666          *  Downloads SPC algorithm from SPC SROM into SRAM.
 667          *
 668          * \return
 669          *  CYRET_STARTED
 670          *  CYRET_LOCKED
 671          *
 672          *******************************************************************************/
 673          cystatus CySpcGetAlgorithm(void)
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 12  

 674          {
 675   1          cystatus status = CYRET_STARTED;
 676   1      
 677   1          /* Make sure the SPC is ready to accept command */
 678   1          if(CY_SPC_IDLE)
 679   1          {
 680   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_ONE;
 681   2              CY_SPC_CPU_DATA_REG = CY_SPC_KEY_TWO(CY_SPC_CMD_DWNLD_ALGORITHM);
 682   2              CY_SPC_CPU_DATA_REG = CY_SPC_CMD_DWNLD_ALGORITHM;
 683   2          }
 684   1          else
 685   1          {
 686   2              status = CYRET_LOCKED;
 687   2          }
 688   1      
 689   1          return(status);
 690   1      }
 691          
 692          /* [] END OF FILE */
 693          
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 13  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION CySpcStart (BEGIN)
                                           ; SOURCE LINE # 71
                                           ; SOURCE LINE # 72
                                           ; SOURCE LINE # 74
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 4408              ORL     A,#08H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0013 9043B0            MOV     DPTR,#043B0H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 4408              ORL     A,#08H
001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 80
001E 900000      R     MOV     DPTR,#interruptState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 81
0026         ?C0001:
0026 22                RET     
             ; FUNCTION CySpcStart (END)

             ; FUNCTION CySpcStop (BEGIN)
                                           ; SOURCE LINE # 90
                                           ; SOURCE LINE # 91
                                           ; SOURCE LINE # 93
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 95
0008 9043A0            MOV     DPTR,#043A0H
000B E0                MOVX    A,@DPTR
000C FF                MOV     R7,A
000D EF                MOV     A,R7
000E 54F7              ANL     A,#0F7H
0010 FF                MOV     R7,A
0011 EF                MOV     A,R7
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 96
0013 9043B0            MOV     DPTR,#043B0H
0016 E0                MOVX    A,@DPTR
0017 FF                MOV     R7,A
0018 EF                MOV     A,R7
0019 54F7              ANL     A,#0F7H
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 14  

001B FF                MOV     R7,A
001C EF                MOV     A,R7
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 99
001E 900000      R     MOV     DPTR,#interruptState
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 100
0026         ?C0002:
0026 22                RET     
             ; FUNCTION CySpcStop (END)

             ; FUNCTION _CySpcReadData (BEGIN)
                                           ; SOURCE LINE # 119
0000 900000      R     MOV     DPTR,#buffer
0003 EB                MOV     A,R3
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 E9                MOV     A,R1
000A F0                MOVX    @DPTR,A
000B 900000      R     MOV     DPTR,#size
000E ED                MOV     A,R5
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 120
                                           ; SOURCE LINE # 123
0010 900000      R     MOV     DPTR,#i
0013 E4                CLR     A
0014 F0                MOVX    @DPTR,A
0015         ?C0003:
0015 900000      R     MOV     DPTR,#size
0018 E0                MOVX    A,@DPTR
0019 FF                MOV     R7,A
001A 900000      R     MOV     DPTR,#i
001D E0                MOVX    A,@DPTR
001E FE                MOV     R6,A
001F EE                MOV     A,R6
0020 C3                CLR     C
0021 9F                SUBB    A,R7
0022 5045              JNC     ?C0004
                                           ; SOURCE LINE # 124
0024         ?C0006:
                                           ; SOURCE LINE # 125
0024 904722            MOV     DPTR,#04722H
0027 E0                MOVX    A,@DPTR
0028 FF                MOV     R7,A
0029 EF                MOV     A,R7
002A 5401              ANL     A,#01H
002C FF                MOV     R7,A
002D 7E00              MOV     R6,#00H
002F EF                MOV     A,R7
0030 4E                ORL     A,R6
0031 6003              JZ      ?C0008
0033 D3                SETB    C
0034 8001              SJMP    ?C0009
0036         ?C0008:
0036 C3                CLR     C
0037         ?C0009:
0037 4009              JC      ?C0007
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 15  

                                           ; SOURCE LINE # 126
                                           ; SOURCE LINE # 127
0039 7F01              MOV     R7,#01H
003B 7E00              MOV     R6,#00H
003D 120000      E     LCALL   _CyDelayUs
                                           ; SOURCE LINE # 128
0040 80E2              SJMP    ?C0006
0042         ?C0007:
                                           ; SOURCE LINE # 129
0042 904720            MOV     DPTR,#04720H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 900000      R     MOV     DPTR,#buffer
004A E0                MOVX    A,@DPTR
004B FB                MOV     R3,A
004C A3                INC     DPTR
004D E0                MOVX    A,@DPTR
004E FA                MOV     R2,A
004F A3                INC     DPTR
0050 E0                MOVX    A,@DPTR
0051 F9                MOV     R1,A
0052 900000      R     MOV     DPTR,#i
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 E9                MOV     A,R1
0058 2E                ADD     A,R6
0059 F9                MOV     R1,A
005A E4                CLR     A
005B 3A                ADDC    A,R2
005C FA                MOV     R2,A
005D EF                MOV     A,R7
005E 120000      E     LCALL   ?C?CSTPTR
                                           ; SOURCE LINE # 130
0061         ?C0005:
0061 900000      R     MOV     DPTR,#i
0064 E0                MOVX    A,@DPTR
0065 04                INC     A
0066 F0                MOVX    @DPTR,A
0067 80AC              SJMP    ?C0003
0069         ?C0004:
                                           ; SOURCE LINE # 132
0069 900000      R     MOV     DPTR,#i
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
                                           ; SOURCE LINE # 133
006E         ?C0010:
006E 22                RET     
             ; FUNCTION _CySpcReadData (END)

             ; FUNCTION _CySpcLoadMultiByte (BEGIN)
                                           ; SOURCE LINE # 160
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#buffer
0010 EB                MOV     A,R3
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 16  

0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EA                MOV     A,R2
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 E9                MOV     A,R1
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
                                           ; SOURCE LINE # 163
0018 900000      R     MOV     DPTR,#status
001B 7407              MOV     A,#07H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 170
001E 900000      R     MOV     DPTR,#array
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 C3                CLR     C
0025 943F              SUBB    A,#03FH
0027 500B              JNC     ?C0013
0029 900000      R     MOV     DPTR,#size
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
002E EF                MOV     A,R7
002F C3                CLR     C
0030 9420              SUBB    A,#020H
0032 401C              JC      ?C0012
0034         ?C0013:
0034 900000      R     MOV     DPTR,#array
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
0039 EF                MOV     A,R7
003A D3                SETB    C
003B 943F              SUBB    A,#03FH
003D 5003              JNC     $ + 5H
003F 020000      R     LJMP    ?C0011
0042 900000      R     MOV     DPTR,#size
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 C3                CLR     C
0049 9410              SUBB    A,#010H
004B 4003              JC      $ + 5H
004D 020000      R     LJMP    ?C0011
0050         ?C0012:
                                           ; SOURCE LINE # 172
                                           ; SOURCE LINE # 173
0050 904722            MOV     DPTR,#04722H
0053 E0                MOVX    A,@DPTR
0054 FF                MOV     R7,A
0055 EF                MOV     A,R7
0056 5402              ANL     A,#02H
0058 FF                MOV     R7,A
0059 7E00              MOV     R6,#00H
005B EF                MOV     A,R7
005C 4E                ORL     A,R6
005D 7003              JNZ     $ + 5H
005F 020000      R     LJMP    ?C0014
                                           ; SOURCE LINE # 174
                                           ; SOURCE LINE # 175
0062 904720            MOV     DPTR,#04720H
0065 74B6              MOV     A,#0B6H
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 17  

0067 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 176
0068 904720            MOV     DPTR,#04720H
006B 74D4              MOV     A,#0D4H
006D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 177
006E 904720            MOV     DPTR,#04720H
0071 7401              MOV     A,#01H
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 179
0074 904722            MOV     DPTR,#04722H
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 EF                MOV     A,R7
007A 5402              ANL     A,#02H
007C FF                MOV     R7,A
007D 7E00              MOV     R6,#00H
007F EF                MOV     A,R7
0080 4E                ORL     A,R6
0081 707A              JNZ     ?C0015
                                           ; SOURCE LINE # 180
                                           ; SOURCE LINE # 181
0083 900000      R     MOV     DPTR,#array
0086 E0                MOVX    A,@DPTR
0087 FF                MOV     R7,A
0088 904720            MOV     DPTR,#04720H
008B EF                MOV     A,R7
008C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 182
008D 900000      R     MOV     DPTR,#address
0090 E0                MOVX    A,@DPTR
0091 FE                MOV     R6,A
0092 A3                INC     DPTR
0093 E0                MOVX    A,@DPTR
0094 FF                MOV     R7,A
0095 EE                MOV     A,R6
0096 FF                MOV     R7,A
0097 7E00              MOV     R6,#00H
0099 EF                MOV     A,R7
009A 5401              ANL     A,#01H
009C FF                MOV     R7,A
009D 904720            MOV     DPTR,#04720H
00A0 EF                MOV     A,R7
00A1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 183
00A2 900000      R     MOV     DPTR,#address
00A5 E0                MOVX    A,@DPTR
00A6 FE                MOV     R6,A
00A7 A3                INC     DPTR
00A8 E0                MOVX    A,@DPTR
00A9 FF                MOV     R7,A
00AA EF                MOV     A,R7
00AB 54FF              ANL     A,#0FFH
00AD FF                MOV     R7,A
00AE 904720            MOV     DPTR,#04720H
00B1 EF                MOV     A,R7
00B2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 184
00B3 900000      R     MOV     DPTR,#size
00B6 E0                MOVX    A,@DPTR
00B7 FF                MOV     R7,A
00B8 EF                MOV     A,R7
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 18  

00B9 14                DEC     A
00BA FF                MOV     R7,A
00BB 904720            MOV     DPTR,#04720H
00BE EF                MOV     A,R7
00BF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 186
00C0 900000      R     MOV     DPTR,#i
00C3 E4                CLR     A
00C4 F0                MOVX    @DPTR,A
00C5         ?C0016:
00C5 900000      R     MOV     DPTR,#size
00C8 E0                MOVX    A,@DPTR
00C9 FF                MOV     R7,A
00CA 900000      R     MOV     DPTR,#i
00CD E0                MOVX    A,@DPTR
00CE FE                MOV     R6,A
00CF EE                MOV     A,R6
00D0 C3                CLR     C
00D1 9F                SUBB    A,R7
00D2 503F              JNC     ?C0021
                                           ; SOURCE LINE # 187
                                           ; SOURCE LINE # 188
00D4 900000      R     MOV     DPTR,#buffer
00D7 E0                MOVX    A,@DPTR
00D8 FB                MOV     R3,A
00D9 A3                INC     DPTR
00DA E0                MOVX    A,@DPTR
00DB FA                MOV     R2,A
00DC A3                INC     DPTR
00DD E0                MOVX    A,@DPTR
00DE F9                MOV     R1,A
00DF 900000      R     MOV     DPTR,#i
00E2 E0                MOVX    A,@DPTR
00E3 FF                MOV     R7,A
00E4 E9                MOV     A,R1
00E5 2F                ADD     A,R7
00E6 F9                MOV     R1,A
00E7 E4                CLR     A
00E8 3A                ADDC    A,R2
00E9 FA                MOV     R2,A
00EA 120000      E     LCALL   ?C?CLDPTR
00ED FF                MOV     R7,A
00EE 904720            MOV     DPTR,#04720H
00F1 EF                MOV     A,R7
00F2 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
00F3         ?C0018:
00F3 900000      R     MOV     DPTR,#i
00F6 E0                MOVX    A,@DPTR
00F7 04                INC     A
00F8 F0                MOVX    @DPTR,A
00F9 80CA              SJMP    ?C0016
00FB         ?C0017:
                                           ; SOURCE LINE # 190
00FB 8016              SJMP    ?C0021
00FD         ?C0015:
                                           ; SOURCE LINE # 192
                                           ; SOURCE LINE # 193
00FD 900000      R     MOV     DPTR,#status
0100 7409              MOV     A,#09H
0102 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 194
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 19  

0103         ?C0019:
                                           ; SOURCE LINE # 195
0103 800E              SJMP    ?C0021
0105         ?C0014:
                                           ; SOURCE LINE # 197
                                           ; SOURCE LINE # 198
0105 900000      R     MOV     DPTR,#status
0108 7404              MOV     A,#04H
010A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 199
010B         ?C0020:
                                           ; SOURCE LINE # 200
010B 8006              SJMP    ?C0021
010D         ?C0011:
                                           ; SOURCE LINE # 202
                                           ; SOURCE LINE # 203
010D 900000      R     MOV     DPTR,#status
0110 7401              MOV     A,#01H
0112 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 204
0113         ?C0021:
                                           ; SOURCE LINE # 206
0113 900000      R     MOV     DPTR,#status
0116 E0                MOVX    A,@DPTR
0117 FF                MOV     R7,A
                                           ; SOURCE LINE # 207
0118         ?C0022:
0118 22                RET     
             ; FUNCTION _CySpcLoadMultiByte (END)

             ; FUNCTION _CySpcLoadRow (BEGIN)
                                           ; SOURCE LINE # 238
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#buffer
0008 EB                MOV     A,R3
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B EA                MOV     A,R2
000C F0                MOVX    @DPTR,A
000D A3                INC     DPTR
000E E9                MOV     A,R1
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 239
                                           ; SOURCE LINE # 240
0010 900000      R     MOV     DPTR,#status
0013 7407              MOV     A,#07H
0015 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 244
0016 904722            MOV     DPTR,#04722H
0019 E0                MOVX    A,@DPTR
001A FF                MOV     R7,A
001B EF                MOV     A,R7
001C 5402              ANL     A,#02H
001E FF                MOV     R7,A
001F 7E00              MOV     R6,#00H
0021 EF                MOV     A,R7
0022 4E                ORL     A,R6
0023 7003              JNZ     $ + 5H
0025 020000      R     LJMP    ?C0023
                                           ; SOURCE LINE # 245
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 20  

                                           ; SOURCE LINE # 246
0028 904720            MOV     DPTR,#04720H
002B 74B6              MOV     A,#0B6H
002D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 247
002E 904720            MOV     DPTR,#04720H
0031 74D5              MOV     A,#0D5H
0033 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 248
0034 904720            MOV     DPTR,#04720H
0037 7402              MOV     A,#02H
0039 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 251
003A 904722            MOV     DPTR,#04722H
003D E0                MOVX    A,@DPTR
003E FF                MOV     R7,A
003F EF                MOV     A,R7
0040 5402              ANL     A,#02H
0042 FF                MOV     R7,A
0043 7E00              MOV     R6,#00H
0045 EF                MOV     A,R7
0046 4E                ORL     A,R6
0047 705D              JNZ     ?C0024
                                           ; SOURCE LINE # 252
                                           ; SOURCE LINE # 253
0049 900000      R     MOV     DPTR,#array
004C E0                MOVX    A,@DPTR
004D FF                MOV     R7,A
004E 904720            MOV     DPTR,#04720H
0051 EF                MOV     A,R7
0052 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 255
0053 900000      R     MOV     DPTR,#i
0056 E4                CLR     A
0057 F0                MOVX    @DPTR,A
0058 A3                INC     DPTR
0059 E4                CLR     A
005A F0                MOVX    @DPTR,A
005B         ?C0025:
005B 900000      R     MOV     DPTR,#size
005E E0                MOVX    A,@DPTR
005F FE                MOV     R6,A
0060 A3                INC     DPTR
0061 E0                MOVX    A,@DPTR
0062 FF                MOV     R7,A
0063 900000      R     MOV     DPTR,#i
0066 E0                MOVX    A,@DPTR
0067 FC                MOV     R4,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FD                MOV     R5,A
006B C3                CLR     C
006C ED                MOV     A,R5
006D 9F                SUBB    A,R7
006E EC                MOV     A,R4
006F 9E                SUBB    A,R6
0070 5042              JNC     ?C0029
                                           ; SOURCE LINE # 256
                                           ; SOURCE LINE # 257
0072 900000      R     MOV     DPTR,#buffer
0075 E0                MOVX    A,@DPTR
0076 FB                MOV     R3,A
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 21  

0077 A3                INC     DPTR
0078 E0                MOVX    A,@DPTR
0079 FA                MOV     R2,A
007A A3                INC     DPTR
007B E0                MOVX    A,@DPTR
007C F9                MOV     R1,A
007D 900000      R     MOV     DPTR,#i
0080 E0                MOVX    A,@DPTR
0081 FE                MOV     R6,A
0082 A3                INC     DPTR
0083 E0                MOVX    A,@DPTR
0084 FF                MOV     R7,A
0085 E9                MOV     A,R1
0086 2F                ADD     A,R7
0087 F9                MOV     R1,A
0088 EA                MOV     A,R2
0089 3E                ADDC    A,R6
008A FA                MOV     R2,A
008B 120000      E     LCALL   ?C?CLDPTR
008E FF                MOV     R7,A
008F 904720            MOV     DPTR,#04720H
0092 EF                MOV     A,R7
0093 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 258
0094         ?C0027:
0094 900000      R     MOV     DPTR,#i+01H
0097 E0                MOVX    A,@DPTR
0098 04                INC     A
0099 F0                MOVX    @DPTR,A
009A 7006              JNZ     ?C0064
009C 900000      R     MOV     DPTR,#i
009F E0                MOVX    A,@DPTR
00A0 04                INC     A
00A1 F0                MOVX    @DPTR,A
00A2         ?C0064:
00A2 80B7              SJMP    ?C0025
00A4         ?C0026:
                                           ; SOURCE LINE # 259
00A4 800E              SJMP    ?C0029
00A6         ?C0024:
                                           ; SOURCE LINE # 261
                                           ; SOURCE LINE # 262
00A6 900000      R     MOV     DPTR,#status
00A9 7409              MOV     A,#09H
00AB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 263
00AC         ?C0028:
                                           ; SOURCE LINE # 264
00AC 8006              SJMP    ?C0029
00AE         ?C0023:
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 267
00AE 900000      R     MOV     DPTR,#status
00B1 7404              MOV     A,#04H
00B3 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 268
00B4         ?C0029:
                                           ; SOURCE LINE # 270
00B4 900000      R     MOV     DPTR,#status
00B7 E0                MOVX    A,@DPTR
00B8 FF                MOV     R7,A
                                           ; SOURCE LINE # 271
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 22  

00B9         ?C0030:
00B9 22                RET     
             ; FUNCTION _CySpcLoadRow (END)

             ; FUNCTION _CySpcLoadRowFull (BEGIN)
                                           ; SOURCE LINE # 304
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#row
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#buffer
0010 EB                MOV     A,R3
0011 F0                MOVX    @DPTR,A
0012 A3                INC     DPTR
0013 EA                MOV     A,R2
0014 F0                MOVX    @DPTR,A
0015 A3                INC     DPTR
0016 E9                MOV     A,R1
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 306
                                           ; SOURCE LINE # 307
0018 900000      R     MOV     DPTR,#status
001B 7407              MOV     A,#07H
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 315
001E 904722            MOV     DPTR,#04722H
0021 E0                MOVX    A,@DPTR
0022 FF                MOV     R7,A
0023 EF                MOV     A,R7
0024 5402              ANL     A,#02H
0026 FF                MOV     R7,A
0027 7E00              MOV     R6,#00H
0029 EF                MOV     A,R7
002A 4E                ORL     A,R6
002B 7003              JNZ     $ + 5H
002D 020000      R     LJMP    ?C0031
                                           ; SOURCE LINE # 316
                                           ; SOURCE LINE # 317
0030 904720            MOV     DPTR,#04720H
0033 74B6              MOV     A,#0B6H
0035 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 318
0036 904720            MOV     DPTR,#04720H
0039 74D5              MOV     A,#0D5H
003B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 319
003C 904720            MOV     DPTR,#04720H
003F 7402              MOV     A,#02H
0041 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 322
0042 904722            MOV     DPTR,#04722H
0045 E0                MOVX    A,@DPTR
0046 FF                MOV     R7,A
0047 EF                MOV     A,R7
0048 5402              ANL     A,#02H
004A FF                MOV     R7,A
004B 7E00              MOV     R6,#00H
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 23  

004D EF                MOV     A,R7
004E 4E                ORL     A,R6
004F 6003              JZ      $ + 5H
0051 020000      R     LJMP    ?C0032
                                           ; SOURCE LINE # 323
                                           ; SOURCE LINE # 324
0054 900000      R     MOV     DPTR,#array
0057 E0                MOVX    A,@DPTR
0058 FF                MOV     R7,A
0059 904720            MOV     DPTR,#04720H
005C EF                MOV     A,R7
005D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 355
005E 900000      R     MOV     DPTR,#i
0061 E4                CLR     A
0062 F0                MOVX    @DPTR,A
0063 A3                INC     DPTR
0064 E4                CLR     A
0065 F0                MOVX    @DPTR,A
0066         ?C0033:
0066 900000      R     MOV     DPTR,#size
0069 E0                MOVX    A,@DPTR
006A FE                MOV     R6,A
006B A3                INC     DPTR
006C E0                MOVX    A,@DPTR
006D FF                MOV     R7,A
006E 900000      R     MOV     DPTR,#i
0071 E0                MOVX    A,@DPTR
0072 FC                MOV     R4,A
0073 A3                INC     DPTR
0074 E0                MOVX    A,@DPTR
0075 FD                MOV     R5,A
0076 C3                CLR     C
0077 ED                MOV     A,R5
0078 9F                SUBB    A,R7
0079 EC                MOV     A,R4
007A 9E                SUBB    A,R6
007B 5032              JNC     ?C0034
                                           ; SOURCE LINE # 356
                                           ; SOURCE LINE # 357
007D 900000      R     MOV     DPTR,#buffer
0080 E0                MOVX    A,@DPTR
0081 FB                MOV     R3,A
0082 A3                INC     DPTR
0083 E0                MOVX    A,@DPTR
0084 FA                MOV     R2,A
0085 A3                INC     DPTR
0086 E0                MOVX    A,@DPTR
0087 F9                MOV     R1,A
0088 900000      R     MOV     DPTR,#i
008B E0                MOVX    A,@DPTR
008C FE                MOV     R6,A
008D A3                INC     DPTR
008E E0                MOVX    A,@DPTR
008F FF                MOV     R7,A
0090 E9                MOV     A,R1
0091 2F                ADD     A,R7
0092 F9                MOV     R1,A
0093 EA                MOV     A,R2
0094 3E                ADDC    A,R6
0095 FA                MOV     R2,A
0096 120000      E     LCALL   ?C?CLDPTR
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 24  

0099 FF                MOV     R7,A
009A 904720            MOV     DPTR,#04720H
009D EF                MOV     A,R7
009E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 358
009F         ?C0035:
009F 900000      R     MOV     DPTR,#i+01H
00A2 E0                MOVX    A,@DPTR
00A3 04                INC     A
00A4 F0                MOVX    @DPTR,A
00A5 7006              JNZ     ?C0065
00A7 900000      R     MOV     DPTR,#i
00AA E0                MOVX    A,@DPTR
00AB 04                INC     A
00AC F0                MOVX    @DPTR,A
00AD         ?C0065:
00AD 80B7              SJMP    ?C0033
00AF         ?C0034:
                                           ; SOURCE LINE # 380
00AF 900000      R     MOV     DPTR,#size
00B2 E0                MOVX    A,@DPTR
00B3 FE                MOV     R6,A
00B4 A3                INC     DPTR
00B5 E0                MOVX    A,@DPTR
00B6 FF                MOV     R7,A
00B7 EF                MOV     A,R7
00B8 6400              XRL     A,#00H
00BA 7003              JNZ     ?C0066
00BC EE                MOV     A,R6
00BD 6401              XRL     A,#01H
00BF         ?C0066:
00BF 6003              JZ      $ + 5H
00C1 020000      R     LJMP    ?C0041
00C4 900000      R     MOV     DPTR,#array
00C7 E0                MOVX    A,@DPTR
00C8 FF                MOV     R7,A
00C9 EF                MOV     A,R7
00CA D3                SETB    C
00CB 943F              SUBB    A,#03FH
00CD 4003              JC      $ + 5H
00CF 020000      R     LJMP    ?C0041
                                           ; SOURCE LINE # 381
                                           ; SOURCE LINE # 384
00D2 900000      R     MOV     DPTR,#array
00D5 E0                MOVX    A,@DPTR
00D6 FF                MOV     R7,A
00D7 7E00              MOV     R6,#00H
00D9 7C20              MOV     R4,#020H
00DB 7D00              MOV     R5,#00H
00DD 120000      E     LCALL   ?C?LIMUL
00E0 EF                MOV     A,R7
00E1 2400              ADD     A,#00H
00E3 FF                MOV     R7,A
00E4 EE                MOV     A,R6
00E5 3400              ADDC    A,#00H
00E7 FE                MOV     R6,A
00E8 ED                MOV     A,R5
00E9 3408              ADDC    A,#08H
00EB FD                MOV     R5,A
00EC EC                MOV     A,R4
00ED 3400              ADDC    A,#00H
00EF FC                MOV     R4,A
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 25  

00F0 C004              PUSH    AR4
00F2 C005              PUSH    AR5
00F4 C006              PUSH    AR6
00F6 C007              PUSH    AR7
00F8 900000      R     MOV     DPTR,#row
00FB E0                MOVX    A,@DPTR
00FC FE                MOV     R6,A
00FD A3                INC     DPTR
00FE E0                MOVX    A,@DPTR
00FF FF                MOV     R7,A
0100 7C00              MOV     R4,#00H
0102 7D20              MOV     R5,#020H
0104 120000      E     LCALL   ?C?LIMUL
0107 A804              MOV     R0,AR4
0109 A905              MOV     R1,AR5
010B AA06              MOV     R2,AR6
010D AB07              MOV     R3,AR7
010F D007              POP     AR7
0111 D006              POP     AR6
0113 D005              POP     AR5
0115 D004              POP     AR4
0117 EB                MOV     A,R3
0118 2F                ADD     A,R7
0119 FF                MOV     R7,A
011A EA                MOV     A,R2
011B 3E                ADDC    A,R6
011C FE                MOV     R6,A
011D E9                MOV     A,R1
011E 3D                ADDC    A,R5
011F FD                MOV     R5,A
0120 E8                MOV     A,R0
0121 3C                ADDC    A,R4
0122 FC                MOV     R4,A
0123 900000      R     MOV     DPTR,#offset
0126 120000      E     LCALL   ?C?LSTXDATA
                                           ; SOURCE LINE # 386
0129 900000      R     MOV     DPTR,#i
012C E4                CLR     A
012D F0                MOVX    @DPTR,A
012E A3                INC     DPTR
012F E4                CLR     A
0130 F0                MOVX    @DPTR,A
0131         ?C0037:
0131 900000      R     MOV     DPTR,#i
0134 E0                MOVX    A,@DPTR
0135 FE                MOV     R6,A
0136 A3                INC     DPTR
0137 E0                MOVX    A,@DPTR
0138 FF                MOV     R7,A
0139 C3                CLR     C
013A EF                MOV     A,R7
013B 9420              SUBB    A,#020H
013D EE                MOV     A,R6
013E 9400              SUBB    A,#00H
0140 5053              JNC     ?C0041
                                           ; SOURCE LINE # 387
                                           ; SOURCE LINE # 388
0142 900000      R     MOV     DPTR,#i
0145 E0                MOVX    A,@DPTR
0146 FE                MOV     R6,A
0147 A3                INC     DPTR
0148 E0                MOVX    A,@DPTR
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 26  

0149 FF                MOV     R7,A
014A E4                CLR     A
014B FC                MOV     R4,A
014C FD                MOV     R5,A
014D 900000      R     MOV     DPTR,#offset
0150 E0                MOVX    A,@DPTR
0151 F8                MOV     R0,A
0152 A3                INC     DPTR
0153 E0                MOVX    A,@DPTR
0154 F9                MOV     R1,A
0155 A3                INC     DPTR
0156 E0                MOVX    A,@DPTR
0157 FA                MOV     R2,A
0158 A3                INC     DPTR
0159 E0                MOVX    A,@DPTR
015A FB                MOV     R3,A
015B EF                MOV     A,R7
015C 2B                ADD     A,R3
015D FF                MOV     R7,A
015E EE                MOV     A,R6
015F 3A                ADDC    A,R2
0160 FE                MOV     R6,A
0161 ED                MOV     A,R5
0162 39                ADDC    A,R1
0163 FD                MOV     R5,A
0164 EC                MOV     A,R4
0165 38                ADDC    A,R0
0166 FC                MOV     R4,A
0167 A907              MOV     R1,AR7
0169 AA06              MOV     R2,AR6
016B AB05              MOV     R3,AR5
016D 120000      E     LCALL   _cyread8
0170 904720            MOV     DPTR,#04720H
0173 EF                MOV     A,R7
0174 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 389
0175         ?C0039:
0175 900000      R     MOV     DPTR,#i+01H
0178 E0                MOVX    A,@DPTR
0179 04                INC     A
017A F0                MOVX    @DPTR,A
017B 7006              JNZ     ?C0067
017D 900000      R     MOV     DPTR,#i
0180 E0                MOVX    A,@DPTR
0181 04                INC     A
0182 F0                MOVX    @DPTR,A
0183         ?C0067:
0183 80AC              SJMP    ?C0037
0185         ?C0038:
                                           ; SOURCE LINE # 390
0185         ?C0036:
                                           ; SOURCE LINE # 400
0185 800E              SJMP    ?C0041
0187         ?C0032:
                                           ; SOURCE LINE # 402
                                           ; SOURCE LINE # 403
0187 900000      R     MOV     DPTR,#status
018A 7409              MOV     A,#09H
018C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 404
018D         ?C0040:
                                           ; SOURCE LINE # 405
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 27  

018D 8006              SJMP    ?C0041
018F         ?C0031:
                                           ; SOURCE LINE # 407
                                           ; SOURCE LINE # 408
018F 900000      R     MOV     DPTR,#status
0192 7404              MOV     A,#04H
0194 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 409
0195         ?C0041:
                                           ; SOURCE LINE # 411
0195 900000      R     MOV     DPTR,#status
0198 E0                MOVX    A,@DPTR
0199 FF                MOV     R7,A
                                           ; SOURCE LINE # 412
019A         ?C0042:
019A 22                RET     
             ; FUNCTION _CySpcLoadRowFull (END)

             ; FUNCTION _CySpcWriteRow (BEGIN)
                                           ; SOURCE LINE # 440
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#address
0008 EC                MOV     A,R4
0009 F0                MOVX    @DPTR,A
000A A3                INC     DPTR
000B ED                MOV     A,R5
000C F0                MOVX    @DPTR,A
000D 900000      R     MOV     DPTR,#tempPolarity
0010 EB                MOV     A,R3
0011 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 442
                                           ; SOURCE LINE # 443
0012 900000      R     MOV     DPTR,#status
0015 7407              MOV     A,#07H
0017 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 446
0018 904722            MOV     DPTR,#04722H
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D EF                MOV     A,R7
001E 5402              ANL     A,#02H
0020 FF                MOV     R7,A
0021 7E00              MOV     R6,#00H
0023 EF                MOV     A,R7
0024 4E                ORL     A,R6
0025 606B              JZ      ?C0043
                                           ; SOURCE LINE # 447
                                           ; SOURCE LINE # 448
0027 904720            MOV     DPTR,#04720H
002A 74B6              MOV     A,#0B6H
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 449
002D 904720            MOV     DPTR,#04720H
0030 74D8              MOV     A,#0D8H
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 450
0033 904720            MOV     DPTR,#04720H
0036 7405              MOV     A,#05H
0038 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 453
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 28  

0039 904722            MOV     DPTR,#04722H
003C E0                MOVX    A,@DPTR
003D FF                MOV     R7,A
003E EF                MOV     A,R7
003F 5402              ANL     A,#02H
0041 FF                MOV     R7,A
0042 7E00              MOV     R6,#00H
0044 EF                MOV     A,R7
0045 4E                ORL     A,R6
0046 7042              JNZ     ?C0044
                                           ; SOURCE LINE # 454
                                           ; SOURCE LINE # 455
0048 900000      R     MOV     DPTR,#array
004B E0                MOVX    A,@DPTR
004C FF                MOV     R7,A
004D 904720            MOV     DPTR,#04720H
0050 EF                MOV     A,R7
0051 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 456
0052 900000      R     MOV     DPTR,#address
0055 E0                MOVX    A,@DPTR
0056 FE                MOV     R6,A
0057 A3                INC     DPTR
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
005A EE                MOV     A,R6
005B FF                MOV     R7,A
005C 7E00              MOV     R6,#00H
005E 904720            MOV     DPTR,#04720H
0061 EF                MOV     A,R7
0062 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 457
0063 900000      R     MOV     DPTR,#address
0066 E0                MOVX    A,@DPTR
0067 FE                MOV     R6,A
0068 A3                INC     DPTR
0069 E0                MOVX    A,@DPTR
006A FF                MOV     R7,A
006B EF                MOV     A,R7
006C 54FF              ANL     A,#0FFH
006E FF                MOV     R7,A
006F 904720            MOV     DPTR,#04720H
0072 EF                MOV     A,R7
0073 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 458
0074 900000      R     MOV     DPTR,#tempPolarity
0077 E0                MOVX    A,@DPTR
0078 FF                MOV     R7,A
0079 904720            MOV     DPTR,#04720H
007C EF                MOV     A,R7
007D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 459
007E 900000      R     MOV     DPTR,#tempMagnitude
0081 E0                MOVX    A,@DPTR
0082 FF                MOV     R7,A
0083 904720            MOV     DPTR,#04720H
0086 EF                MOV     A,R7
0087 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 460
0088 800E              SJMP    ?C0046
008A         ?C0044:
                                           ; SOURCE LINE # 462
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 29  

                                           ; SOURCE LINE # 463
008A 900000      R     MOV     DPTR,#status
008D 7409              MOV     A,#09H
008F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 464
0090         ?C0045:
                                           ; SOURCE LINE # 465
0090 8006              SJMP    ?C0046
0092         ?C0043:
                                           ; SOURCE LINE # 467
                                           ; SOURCE LINE # 468
0092 900000      R     MOV     DPTR,#status
0095 7404              MOV     A,#04H
0097 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 469
0098         ?C0046:
                                           ; SOURCE LINE # 471
0098 900000      R     MOV     DPTR,#status
009B E0                MOVX    A,@DPTR
009C FF                MOV     R7,A
                                           ; SOURCE LINE # 472
009D         ?C0047:
009D 22                RET     
             ; FUNCTION _CySpcWriteRow (END)

             ; FUNCTION _CySpcEraseSector (BEGIN)
                                           ; SOURCE LINE # 492
0000 900000      R     MOV     DPTR,#array
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 900000      R     MOV     DPTR,#sectorNumber
0008 ED                MOV     A,R5
0009 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 493
                                           ; SOURCE LINE # 494
000A 900000      R     MOV     DPTR,#status
000D 7407              MOV     A,#07H
000F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 497
0010 904722            MOV     DPTR,#04722H
0013 E0                MOVX    A,@DPTR
0014 FF                MOV     R7,A
0015 EF                MOV     A,R7
0016 5402              ANL     A,#02H
0018 FF                MOV     R7,A
0019 7E00              MOV     R6,#00H
001B EF                MOV     A,R7
001C 4E                ORL     A,R6
001D 603F              JZ      ?C0048
                                           ; SOURCE LINE # 498
                                           ; SOURCE LINE # 499
001F 904720            MOV     DPTR,#04720H
0022 74B6              MOV     A,#0B6H
0024 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 500
0025 904720            MOV     DPTR,#04720H
0028 74DB              MOV     A,#0DBH
002A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 501
002B 904720            MOV     DPTR,#04720H
002E 7408              MOV     A,#08H
0030 F0                MOVX    @DPTR,A
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 30  

                                           ; SOURCE LINE # 504
0031 904722            MOV     DPTR,#04722H
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 EF                MOV     A,R7
0037 5402              ANL     A,#02H
0039 FF                MOV     R7,A
003A 7E00              MOV     R6,#00H
003C EF                MOV     A,R7
003D 4E                ORL     A,R6
003E 7016              JNZ     ?C0049
                                           ; SOURCE LINE # 505
                                           ; SOURCE LINE # 506
0040 900000      R     MOV     DPTR,#array
0043 E0                MOVX    A,@DPTR
0044 FF                MOV     R7,A
0045 904720            MOV     DPTR,#04720H
0048 EF                MOV     A,R7
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 507
004A 900000      R     MOV     DPTR,#sectorNumber
004D E0                MOVX    A,@DPTR
004E FF                MOV     R7,A
004F 904720            MOV     DPTR,#04720H
0052 EF                MOV     A,R7
0053 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 508
0054 800E              SJMP    ?C0051
0056         ?C0049:
                                           ; SOURCE LINE # 510
                                           ; SOURCE LINE # 511
0056 900000      R     MOV     DPTR,#status
0059 7409              MOV     A,#09H
005B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 512
005C         ?C0050:
                                           ; SOURCE LINE # 513
005C 8006              SJMP    ?C0051
005E         ?C0048:
                                           ; SOURCE LINE # 515
                                           ; SOURCE LINE # 516
005E 900000      R     MOV     DPTR,#status
0061 7404              MOV     A,#04H
0063 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 517
0064         ?C0051:
                                           ; SOURCE LINE # 519
0064 900000      R     MOV     DPTR,#status
0067 E0                MOVX    A,@DPTR
0068 FF                MOV     R7,A
                                           ; SOURCE LINE # 520
0069         ?C0052:
0069 22                RET     
             ; FUNCTION _CySpcEraseSector (END)

             ; FUNCTION _CySpcGetTemp (BEGIN)
                                           ; SOURCE LINE # 545
0000 900000      R     MOV     DPTR,#numSamples
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 546
                                           ; SOURCE LINE # 547
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 31  

0005 900000      R     MOV     DPTR,#status
0008 7407              MOV     A,#07H
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 550
000B 904722            MOV     DPTR,#04722H
000E E0                MOVX    A,@DPTR
000F FF                MOV     R7,A
0010 EF                MOV     A,R7
0011 5402              ANL     A,#02H
0013 FF                MOV     R7,A
0014 7E00              MOV     R6,#00H
0016 EF                MOV     A,R7
0017 4E                ORL     A,R6
0018 6035              JZ      ?C0053
                                           ; SOURCE LINE # 551
                                           ; SOURCE LINE # 552
001A 904720            MOV     DPTR,#04720H
001D 74B6              MOV     A,#0B6H
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 553
0020 904720            MOV     DPTR,#04720H
0023 74E1              MOV     A,#0E1H
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 554
0026 904720            MOV     DPTR,#04720H
0029 740E              MOV     A,#0EH
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 557
002C 904722            MOV     DPTR,#04722H
002F E0                MOVX    A,@DPTR
0030 FF                MOV     R7,A
0031 EF                MOV     A,R7
0032 5402              ANL     A,#02H
0034 FF                MOV     R7,A
0035 7E00              MOV     R6,#00H
0037 EF                MOV     A,R7
0038 4E                ORL     A,R6
0039 700C              JNZ     ?C0054
                                           ; SOURCE LINE # 558
                                           ; SOURCE LINE # 559
003B 900000      R     MOV     DPTR,#numSamples
003E E0                MOVX    A,@DPTR
003F FF                MOV     R7,A
0040 904720            MOV     DPTR,#04720H
0043 EF                MOV     A,R7
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 560
0045 800E              SJMP    ?C0056
0047         ?C0054:
                                           ; SOURCE LINE # 562
                                           ; SOURCE LINE # 563
0047 900000      R     MOV     DPTR,#status
004A 7409              MOV     A,#09H
004C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 564
004D         ?C0055:
                                           ; SOURCE LINE # 565
004D 8006              SJMP    ?C0056
004F         ?C0053:
                                           ; SOURCE LINE # 567
                                           ; SOURCE LINE # 568
004F 900000      R     MOV     DPTR,#status
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 32  

0052 7404              MOV     A,#04H
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 569
0055         ?C0056:
                                           ; SOURCE LINE # 571
0055 900000      R     MOV     DPTR,#status
0058 E0                MOVX    A,@DPTR
0059 FF                MOV     R7,A
                                           ; SOURCE LINE # 572
005A         ?C0057:
005A 22                RET     
             ; FUNCTION _CySpcGetTemp (END)

             ; FUNCTION CySpcLock (BEGIN)
                                           ; SOURCE LINE # 586
                                           ; SOURCE LINE # 587
                                           ; SOURCE LINE # 588
0000 900000      R     MOV     DPTR,#status
0003 7404              MOV     A,#04H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 592
0006 120000      E     LCALL   CyEnterCriticalSection
0009 900000      R     MOV     DPTR,#interruptState
000C EF                MOV     A,R7
000D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 594
000E 900000      R     MOV     DPTR,#SpcLockState
0011 E0                MOVX    A,@DPTR
0012 FF                MOV     R7,A
0013 EF                MOV     A,R7
0014 700B              JNZ     ?C0058
                                           ; SOURCE LINE # 595
                                           ; SOURCE LINE # 596
0016 900000      R     MOV     DPTR,#SpcLockState
0019 7401              MOV     A,#01H
001B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 597
001C 900000      R     MOV     DPTR,#status
001F E4                CLR     A
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 615
0021         ?C0058:
                                           ; SOURCE LINE # 618
0021 900000      R     MOV     DPTR,#interruptState
0024 E0                MOVX    A,@DPTR
0025 FF                MOV     R7,A
0026 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 620
0029 900000      R     MOV     DPTR,#status
002C E0                MOVX    A,@DPTR
002D FF                MOV     R7,A
                                           ; SOURCE LINE # 621
002E         ?C0059:
002E 22                RET     
             ; FUNCTION CySpcLock (END)

             ; FUNCTION CySpcUnlock (BEGIN)
                                           ; SOURCE LINE # 631
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 636
0000 120000      E     LCALL   CyEnterCriticalSection
0003 900000      R     MOV     DPTR,#interruptState
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 33  

0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 639
0008 900000      R     MOV     DPTR,#SpcLockState
000B E4                CLR     A
000C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 659
000D 900000      R     MOV     DPTR,#interruptState
0010 E0                MOVX    A,@DPTR
0011 FF                MOV     R7,A
0012 120000      E     LCALL   _CyExitCriticalSection
                                           ; SOURCE LINE # 660
0015         ?C0060:
0015 22                RET     
             ; FUNCTION CySpcUnlock (END)

             ; FUNCTION CySpcGetAlgorithm (BEGIN)
                                           ; SOURCE LINE # 673
                                           ; SOURCE LINE # 674
                                           ; SOURCE LINE # 675
0000 900000      R     MOV     DPTR,#status
0003 7407              MOV     A,#07H
0005 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 678
0006 904722            MOV     DPTR,#04722H
0009 E0                MOVX    A,@DPTR
000A FF                MOV     R7,A
000B EF                MOV     A,R7
000C 5402              ANL     A,#02H
000E FF                MOV     R7,A
000F 7E00              MOV     R6,#00H
0011 EF                MOV     A,R7
0012 4E                ORL     A,R6
0013 6014              JZ      ?C0061
                                           ; SOURCE LINE # 679
                                           ; SOURCE LINE # 680
0015 904720            MOV     DPTR,#04720H
0018 74B6              MOV     A,#0B6H
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 681
001B 904720            MOV     DPTR,#04720H
001E 74E0              MOV     A,#0E0H
0020 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 682
0021 904720            MOV     DPTR,#04720H
0024 740D              MOV     A,#0DH
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 683
0027 8006              SJMP    ?C0062
0029         ?C0061:
                                           ; SOURCE LINE # 685
                                           ; SOURCE LINE # 686
0029 900000      R     MOV     DPTR,#status
002C 7404              MOV     A,#04H
002E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 687
002F         ?C0062:
                                           ; SOURCE LINE # 689
002F 900000      R     MOV     DPTR,#status
0032 E0                MOVX    A,@DPTR
0033 FF                MOV     R7,A
                                           ; SOURCE LINE # 690
C51 COMPILER V9.51   CYSPC                                                                 11/18/2016 15:58:28 PAGE 34  

0034         ?C0063:
0034 22                RET     
             ; FUNCTION CySpcGetAlgorithm (END)



MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1544    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     56    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
